# =============================================================================
# 🚀 Pre-commit Configuration - 修复版本
# =============================================================================
# 移除了有问题的仓库，专注于Rust项目的核心代码质量控制
# 保留了最稳定和必要的工具

fail_fast: false
exclude: |
  (?x)^(
      .*\.lock$|          # 排除锁文件
      target/.*|          # 排除构建目录
      \.git/.*|           # 排除 git 目录
      .*\.bak$|           # 排除备份文件
      .*\.tmp$            # 排除临时文件
  )$

default_language_version:
  python: python3

repos:
  # ==========================================================================
  #                           🔒 安全检查工具
  # ==========================================================================

  # 检测硬编码密钥和敏感信息
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.27.2
    hooks:
      - id: gitleaks
        name: "🔒 安全 · 检测硬编码密钥"
        args: ['--verbose', '--redact']

  # 检测私钥文件
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: "🔒 安全 · 检测密钥和敏感信息"
        args: ['--baseline', '.secrets.baseline']
        exclude: \.secrets\.baseline$

  # ==========================================================================
  #                          📁 文件系统和通用检查
  # ==========================================================================

  # 预提交官方钩子集合
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      # 文件格式检查
      - id: check-toml
        name: "📁 格式 · 验证 TOML 文件语法"
      - id: check-yaml
        name: "📁 格式 · 验证 YAML 文件语法"
        args: ['--allow-multiple-documents']
      - id: check-json
        name: "📁 格式 · 验证 JSON 文件语法"

      # 文件系统检查
      - id: check-case-conflict
        name: "📁 系统 · 检查文件名大小写冲突"
      - id: check-merge-conflict
        name: "🌳 Git · 检测合并冲突标记"
      - id: check-added-large-files
        name: "🌳 Git · 阻止提交大文件"
        args: ['--maxkb=2048']
      # 分支保护已禁用，允许直接提交到任何分支
      # - id: no-commit-to-branch
      #   name: "🌳 Git · 保护主分支"
      #   args: ['--branch', 'main', '--branch', 'master', '--branch', 'develop']

      # 文件内容清理
      - id: end-of-file-fixer
        name: "✨ 清理 · 确保文件以换行符结尾"
      - id: trailing-whitespace
        name: "✨ 清理 · 删除行尾空白字符"
        args: ['--markdown-linebreak-ext=md']
      - id: mixed-line-ending
        name: "✨ 清理 · 统一行结束符"
        args: ['--fix=lf']

  # ==========================================================================
  #                            🦀 Rust 专用工具
  # ==========================================================================

  - repo: local
    hooks:
      # 代码格式化检查
      - id: cargo-fmt
        name: "🦀 Rust · 代码格式化检查"
        description: "使用 rustfmt 检查代码格式"
        entry: bash -c 'cargo fmt --all -- --check'
        language: rust
        files: \.rs$
        pass_filenames: false

      # 编译检查
      - id: cargo-check
        name: "🦀 Rust · 编译检查"
        description: "检查代码是否能正常编译"
        entry: bash -c 'cargo check --all-targets --all-features'
        language: rust
        files: \.rs$
        pass_filenames: false

      # Clippy 代码质量检查
      - id: cargo-clippy
        name: "🦀 Rust · Clippy 代码质量检查"
        description: "使用 Clippy 进行代码质量分析"
        entry: bash -c 'cargo clippy --all-targets --all-features -- -D warnings'
        language: rust
        files: \.rs$
        pass_filenames: false

      # 依赖安全检查
      - id: cargo-deny
        name: "🦀 Rust · 依赖安全检查"
        description: "检查依赖的安全性和许可证"
        entry: bash -c 'cargo deny check'
        language: rust
        files: \.rs$|Cargo\.toml$|Cargo\.lock$
        pass_filenames: false

      # 单元测试
      - id: cargo-test
        name: "🦀 Rust · 运行单元测试"
        description: "运行项目的单元测试"
        entry: bash -c 'cargo nextest run --all-features'
        language: rust
        files: \.rs$
        pass_filenames: false

      # 文档生成检查
      - id: cargo-doc
        name: "🦀 Rust · 文档生成检查"
        description: "检查文档是否能正常生成"
        entry: bash -c 'cargo doc --no-deps --document-private-items'
        language: rust
        files: \.rs$
        pass_filenames: false

      # 拼写检查
      - id: typos
        name: "🔍 拼写 · 检查代码和文档中的拼写错误"
        description: "使用 typos 检查拼写错误"
        entry: typos
        language: rust
        files: \.*$
        pass_filenames: false
        args: ['--format=brief']

  # ==========================================================================
  #                            🐍 Python 专用工具 (基础版本)
  # ==========================================================================

  # Ruff - 现代 Python 代码格式化和静态检查工具
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.2
    hooks:
      # Python 代码格式化
      - id: ruff-format
        name: "🐍 Python · 代码格式化"
        description: "使用 Ruff 格式化 Python 代码"

      # Python 代码检查和自动修复
      - id: ruff
        name: "🐍 Python · 代码检查和修复"
        description: "使用 Ruff 进行代码质量检查和自动修复"
        args: ['--fix', '--exit-non-zero-on-fix']

  # Python 导入排序
  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        name: "🐍 Python · 导入排序"
        description: "使用 isort 排序和格式化导入语句"
        args: ['--profile', 'black', '--line-length', '88']

  # ==========================================================================
  #                           📊 配置文件验证
  # ==========================================================================

  # YAML 语法检查
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.37.1
    hooks:
      - id: yamllint
        name: "📊 YAML · 语法检查"
        args: ['-d', '{extends: default, rules: {line-length: {max: 120}}}']

  # Markdown 语法检查
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.45.0
    hooks:
      - id: markdownlint
        name: "📝 Markdown · 语法检查"
        args: ['--fix']
