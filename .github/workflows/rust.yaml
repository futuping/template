name: Rust CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # sccache 配置
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  # ===========================================
  # 阶段 1: 构建验证 (Build Validation)
  # ===========================================

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Rust Cache - 缓存依赖和 target 目录
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: msrv
          cache-on-failure: true

      # sccache - 缓存编译结果
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - uses: taiki-e/install-action@cargo-hack
      - run: cargo hack check --rust-version --workspace --all-targets --ignore-private

  security:
    name: Security Audit & Analysis
    runs-on: ubuntu-latest
    needs: msrv
    strategy:
      matrix:
        toolchain: [stable, nightly]
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      # Rust Cache - 缓存依赖和 target 目录
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: security-${{ matrix.toolchain }}
          cache-on-failure: true

      # sccache - 缓存编译结果
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      # 安全审计
      - uses: taiki-e/install-action@cargo-audit
      - run: cargo audit

      # CodeQL 分析
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: rust

      - name: Setup Rust
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

      - name: Build for CodeQL
        run: cargo build --verbose

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:rust"

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: msrv
    strategy:
      matrix:
        toolchain: [stable, nightly]
    steps:
      - uses: actions/checkout@v4

      # Rust Cache - 缓存依赖和 target 目录
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.toolchain }}
          cache-on-failure: true

      # sccache - 缓存编译结果
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

      # 构建验证
      - name: Check compilation
        run: cargo check --all-targets --all-features

      # 运行测试
      - name: Run tests
        run: |
          if [ -f "nextest.toml" ]; then
            cargo install cargo-nextest --locked
            cargo nextest run --all-features
          else
            cargo test --all-features --verbose
          fi

  # ===========================================
  # 阶段 2: 构建制品 (Build Artifacts)
  # ===========================================

  build-artifacts:
    name: Build macOS Artifacts
    runs-on: macos-latest
    needs: [security, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - uses: actions/checkout@v4

      # Rust Cache - 缓存依赖和 target 目录
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: build-artifacts-macos-nightly
          cache-on-failure: true

      # sccache - 缓存编译结果
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Setup Rust
        run: rustup update nightly && rustup default nightly

      - name: Build release binary
        run: cargo build --release --verbose

      - name: Get package info
        id: package
        run: |
          echo "name=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')" >> $GITHUB_OUTPUT
          echo "version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')" >> $GITHUB_OUTPUT

      - name: Create artifacts
        run: |
          mkdir -p artifacts
          cp target/release/${{ steps.package.outputs.name }} artifacts/
          cd artifacts
          tar -czf ${{ steps.package.outputs.name }}-${{ steps.package.outputs.version }}-macos.tar.gz ${{ steps.package.outputs.name }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-binary
          path: artifacts/*.tar.gz
          retention-days: 30

  # ===========================================
  # 阶段 3: 发布 (Release)
  # ===========================================

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-artifacts
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于生成 changelog
          submodules: recursive

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-binary
          path: artifacts/

      - name: Get package info
        id: package
        run: |
          echo "name=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].name')" >> $GITHUB_OUTPUT
          echo "version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')" >> $GITHUB_OUTPUT

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: --latest --strip all
        env:
          OUTPUT: CHANGES.md
          GITHUB_REPO: ${{ github.repository }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body: |
            ${{ steps.git-cliff.outputs.content }}
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===========================================
  # 额外检查: 依赖兼容性测试
  # ===========================================

  latest-deps:
    name: Latest Dependencies Test
    runs-on: ubuntu-latest
    needs: msrv
    continue-on-error: true
    env:
      CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS: allow
    steps:
      - uses: actions/checkout@v4

      # Rust Cache - 缓存依赖和 target 目录
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: latest-deps-stable
          cache-on-failure: true

      # sccache - 缓存编译结果
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - run: rustup update stable && rustup default stable
      - run: cargo update --verbose
      - run: cargo check --verbose
      - run: cargo test --verbose
