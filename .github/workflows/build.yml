name: build

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main

permissions:
  contents: write

# 环境变量
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 高级安全审计 (pre-commit 未覆盖的高级功能)
  security-audit:
    name: 🛡️ 依赖漏洞审计
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 安装安全审计工具
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Rust 依赖漏洞审计
        run: cargo audit

  # 测试作业 - 支持多平台 (pre-commit 已处理基础检查，这里专注测试和覆盖率)
  test:
    name: 🧪 测试 (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 安装 Rust 工具链
        run: |
          rustup toolchain install stable --component llvm-tools-preview
          rustup default stable

      - name: 安装测试工具
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest,cargo-llvm-cov

      - uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.target }}

      - name: 运行测试
        run: cargo nextest run --all-features --profile ci

      - name: 生成测试覆盖率报告 (仅限 Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo llvm-cov nextest --all-features --lcov --output-path lcov.info
          cargo llvm-cov report --html --output-dir coverage-html

      - name: 上传覆盖率报告到 Codecov (仅限 Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false

      - name: 上传覆盖率 HTML 报告 (仅限 Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-html

  # 特殊平台构建作业 (macOS)
  special-build:
    name: 🍎 macOS 构建 (${{ matrix.target }})
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
            experimental: false
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos
            experimental: false

    runs-on: ${{ matrix.os }}
    needs: [security-audit]
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 安装 Rust 工具链
        run: |
          rustup toolchain install nightly
          rustup default nightly

      - name: 添加目标平台
        run: rustup target add ${{ matrix.target }}

      - name: 设置 macOS 开发环境
        if: matrix.platform == 'macos'
        run: |
          echo "配置 macOS 原生构建环境"
          echo "目标架构: ${{ matrix.target }}"
          # 安装必要的 macOS 开发工具
          xcode-select --install || true

      - uses: Swatinem/rust-cache@v2
        with:
          key: special-${{ matrix.target }}

      - name: 构建 macOS 项目
        run: cargo build --release --target ${{ matrix.target }}

      - name: 上传 macOS 构建产物
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/

  # 代码质量分析 (pre-commit 已处理基础检查，这里专注高级分析)
  quality-analysis:
    name: 📊 代码质量分析
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 安装分析工具
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-machete

      - name: 检查未使用的依赖
        run: cargo machete

      - name: 生成依赖图
        run: |
          cargo tree --format "{p} {f}" > dependency-tree.txt
          echo "依赖树已生成"

      - name: 上传依赖分析结果
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: dependency-tree.txt

  # 依赖更新检查
  dependency-review:
    name: 🔍 依赖安全检查
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          comment-summary-in-pr: always

  # 发布作业
  release:
    name: 🚀 创建发布
    runs-on: ubuntu-latest
    needs: [security-audit, test, special-build, quality-analysis]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: 下载 macOS 构建产物
        uses: actions/download-artifact@v4

      - name: 组织发布文件结构
        run: |
          mkdir -p releases/macos

          # 整理 macOS 平台文件
          find . -name "macos-*" -type d | while read dir; do
            if [ -d "$dir" ]; then
              cp -r "$dir"/* releases/macos/ 2>/dev/null || true
            fi
          done

      - name: 生成变更日志
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md

      - name: 生成发布说明
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          ## 🚀 macOS 发布

          本版本支持以下平台：

          ### 🍎 macOS 平台
          - **macOS Apple Silicon**: 原生支持 (aarch64-apple-darwin)
          - **macOS Intel**: 原生支持 (x86_64-apple-darwin)

          ---

          EOF
          cat CHANGES.md >> RELEASE_NOTES.md

      - name: 创建 macOS 安装包
        run: |
          cd releases

          # 创建 macOS 平台 DMG 安装包
          if [ -d "macos" ] && [ "$(ls -A macos)" ]; then
            hdiutil create -volname "macOS Universal" -srcfolder macos -ov -format UDZO ../macos-universal.dmg
          fi

      - name: 创建发布
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_NOTES.md
          files: |
            macos-universal.dmg
            macos-*/*
          draft: false
          prerelease: false
          name: "Release ${{ github.ref_name }} - macOS 支持"
